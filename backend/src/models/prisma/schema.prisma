// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Unit {
  KG
  PLATE
  LITRE
  PIECE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum StockChangeType {
  RECEIVED
  ISSUED
  ADJUSTMENT
}

model Item {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  unit             Unit
  price            Float
  stock            Float
  minStock         Float              @default(0)
  isDeleted        Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Ingredient       Ingredient[]
  StockLog         StockLog[]
  StockRequestItem StockRequestItem[]
}

model Plate {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Ingredient Ingredient[]
  Order      Order[]
}

model Ingredient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  itemId    String   @db.ObjectId
  plateId   String   @db.ObjectId
  quantity  Float
  item      Item     @relation(fields: [itemId], references: [id])
  plate     Plate    @relation(fields: [plateId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId], name: "unique_ingredient")
  @@index([plateId])
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  plateId   String   @db.ObjectId
  plate     Plate    @relation(fields: [plateId], references: [id])
  quantity  Int
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockRequest {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  requester        String
  justification    String?
  status           RequestStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  StockRequestItem StockRequestItem[]
}

model StockRequestItem {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  requestId         String       @db.ObjectId
  itemId            String       @db.ObjectId
  requestedQuantity Float
  approvedQuantity  Float?
  issuedQuantity    Float?
  item              Item         @relation(fields: [itemId], references: [id])
  stockRequest      StockRequest @relation(fields: [requestId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model StockLog {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  itemId           String          @db.ObjectId
  quantity         Float
  actionBy         String          @default("admin")
  changeType       StockChangeType
  relatedRequestID String?         @db.ObjectId
  item             Item            @relation(fields: [itemId], references: [id])
  date             DateTime        @default(now())
}
